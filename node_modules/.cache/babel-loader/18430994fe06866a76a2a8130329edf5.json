{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = [];\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  try {\n    const response = await fetch(\"http://dev.codeleap.co.uk/careers/?limit=30&offset=10\");\n    const data = await response.json();\n    return data.results;\n  } catch {}\n});\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    addPost(state, action) {\n      state.push(action.payload);\n    },\n\n    editPost(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    },\n\n    postDeleted(state, action) {\n      const {\n        id\n      } = action.payload;\n      const existingPost = state.some(post => post.id === id);\n\n      if (existingPost) {\n        return state.filter(post => post.id !== id);\n      }\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPosts.fulfilled, (state, action) => {\n      return state.concat(action.payload);\n    });\n  }\n});\nexport const {\n  addPost,\n  editPost,\n  postDeleted\n} = postsSlice.actions;\nexport default postsSlice;","map":{"version":3,"sources":["C:/Users/heitorzin/Desktop/codeleap/src/redux/posts.slice.js"],"names":["createSlice","createAsyncThunk","initialState","fetchPosts","response","fetch","data","json","results","postsSlice","name","reducers","addPost","state","action","push","payload","editPost","id","title","content","existingPost","find","post","postDeleted","some","filter","extraReducers","builder","addCase","fulfilled","concat","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,kBAAD,EAAqB,YAAY;AACzE,MAAI;AACF,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,uDAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,WAAOD,IAAI,CAACE,OAAZ;AACD,GAJD,CAIE,MAAM,CAAE;AACX,CANyC,CAAnC;AAQP,MAAMC,UAAU,GAAGT,WAAW,CAAC;AAC7BU,EAAAA,IAAI,EAAE,OADuB;AAE7BR,EAAAA,YAF6B;AAG7BS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrBD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,KAHO;;AAIRC,IAAAA,QAAQ,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AACtB,YAAM;AAAEI,QAAAA,EAAF;AAAMC,QAAAA,KAAN;AAAaC,QAAAA;AAAb,UAAyBN,MAAM,CAACE,OAAtC;AACA,YAAMK,YAAY,GAAGR,KAAK,CAACS,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYA,EAAjC,CAArB;;AACA,UAAIG,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACF,KAAb,GAAqBA,KAArB;AACAE,QAAAA,YAAY,CAACD,OAAb,GAAuBA,OAAvB;AACD;AACF,KAXO;;AAYRI,IAAAA,WAAW,CAACX,KAAD,EAAQC,MAAR,EAAgB;AACzB,YAAM;AAAEI,QAAAA;AAAF,UAASJ,MAAM,CAACE,OAAtB;AACA,YAAMK,YAAY,GAAGR,KAAK,CAACY,IAAN,CAAYF,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYA,EAAjC,CAArB;;AACA,UAAIG,YAAJ,EAAkB;AAChB,eAAOR,KAAK,CAACa,MAAN,CAAcH,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYA,EAAnC,CAAP;AACD;AACF;;AAlBO,GAHmB;AAuB7BS,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgB1B,UAAU,CAAC2B,SAA3B,EAAsC,CAACjB,KAAD,EAAQC,MAAR,KAAmB;AACvD,aAAOD,KAAK,CAACkB,MAAN,CAAajB,MAAM,CAACE,OAApB,CAAP;AACD,KAFD;AAGD;AA3B4B,CAAD,CAA9B;AA8BA,OAAO,MAAM;AAAEJ,EAAAA,OAAF;AAAWK,EAAAA,QAAX;AAAqBO,EAAAA;AAArB,IAAqCf,UAAU,CAACuB,OAAtD;AAEP,eAAevB,UAAf","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nconst initialState = [];\n\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  try {\n    const response = await fetch(\"http://dev.codeleap.co.uk/careers/?limit=30&offset=10\");\n    const data = await response.json();\n    return data.results;\n  } catch {}\n});\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    addPost(state, action) {\n      state.push(action.payload);\n    },\n    editPost(state, action) {\n      const { id, title, content } = action.payload;\n      const existingPost = state.find((post) => post.id === id);\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    },\n    postDeleted(state, action) {\n      const { id } = action.payload;\n      const existingPost = state.some((post) => post.id === id);\n      if (existingPost) {\n        return state.filter((post) => post.id !== id);\n      }\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchPosts.fulfilled, (state, action) => {\n      return state.concat(action.payload);\n    });\n  }\n});\n\nexport const { addPost, editPost, postDeleted } = postsSlice.actions;\n\nexport default postsSlice;\n"]},"metadata":{},"sourceType":"module"}